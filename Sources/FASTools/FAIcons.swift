//
//  Icons.swift
//  
//
//  Created by Mason Phillips on 5/20/20.
//

import Foundation

// MARK: - Icon decoding/coding

typealias FAIcons = [String: FAIcon]

struct FAIcon: Codable {
    let changes  : [String]
    let styles   : [FAStyle]
    let unicode  : String
    let label    : String
    let svg      : [String: FASVG]
    
    static var preamble: String {
        return """
        // FAEnum.swift
        //
        // Code copyright (c) 2014-present FontAwesome.swift contributors
        // Refer to LICENSE file for license
        //
        // Icon names, styles, and intellectual data copyright (c) Fort Awesome
        // except where notated in reference to brands.
        // All brand icons are trademarks of their respective owners.
        // Refer to https://fontawesome.com/license/free for the free license
        // Refer to https://fontawesome.com/license for the pro license
        //
        // It is YOUR responsibility to ensure that all intellectual property
        // of Fort Awesome is protected. FontAwesome.swift contributors
        // assume no liability in the case of a breach when using this
        // software.
        //
        // WARNING: Do not edit this file. This file can be re-generated
        // by updating the Font Awesome submodule(s) and running
        // `swift run tools codegen`
        """
    }
}

struct FASVG: Codable {
    let path: FASVGPath
}

enum FASVGPath: Codable {
    case regular(path: String)
    case duotone(path: [String])
    
    init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        
        if let path = try? container.decode(String.self) {
            self = .regular(path: path)
        } else if let path = try? container.decode(Array<String>.self) {
            self = .duotone(path: path)
        } else {
            throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: container.codingPath,
                                                                    debugDescription: "Deserialize SVG path failed: unknown type (not String or [String])"))
        }
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .regular(let path):
            try container.encode(path)
        case .duotone(let path):
            try container.encode(path)
        }
    }
}

enum FAStyle: String, Codable {
    case light, regular, solid
    case brands
    case duotone
}
